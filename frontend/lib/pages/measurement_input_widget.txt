import 'package:bvm_manual_inspection_station/models/measurement_step_model.dart';
import 'package:bvm_manual_inspection_station/config/media_kit_video_player.dart';
import 'package:flutter/material.dart';

class MeasurementInputWidget extends StatelessWidget {
  final String label;
  final String hint;
  final TextEditingController controller;
  final bool isLastStep;
  // final VoidCallback? onNext;
  // final VoidCallback? onBack;

  const MeasurementInputWidget({
    Key? key,
    required this.label,
    required this.hint,
    required this.controller,
    required this.isLastStep, required void Function() onNext, required void Function() onBack, required Color accent,
    // this.onNext,
    // this.onBack,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      margin: const EdgeInsets.symmetric(vertical: 12),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(label, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            const SizedBox(height: 12),
            TextField(
              controller: controller,
              decoration: InputDecoration(
                labelText: hint,
                border: const OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                // Placeholder: implement step logic
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text(isLastStep ? 'Submit pressed' : 'Next pressed')),
                );
              },
              child: Text(isLastStep ? 'Submit' : 'Next'),
            ),
          ],
        ),
      ),
    );
  }
}

class MeasurementStepPage extends StatefulWidget {
  final String category;
  final MeasurementStepModel model;

  const MeasurementStepPage({Key? key, required this.category, required this.model}) : super(key: key);

  @override
  _MeasurementStepPageState createState() => _MeasurementStepPageState();
}

class _MeasurementStepPageState extends State<MeasurementStepPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _inputController = TextEditingController();
  bool _productIdSet = false;

  @override
  Widget build(BuildContext context) {
    if (!_productIdSet) {
      return Center(child: Text('Enter Product ID to continue'));
    }
    if (widget.model.isSummary) {
      return MeasurementSummaryWidget(model: widget.model);
    }
    final currentStep = widget.model.steps[widget.model.currentStep];
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'Step ${widget.model.currentStep + 1} of ${widget.model.steps.length}',
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Builder(
              builder: (context) {
                try {
                  return MediaKitVideoPlayer(
                    player: widget.model.player,
                    videoController: widget.model.videoController,
                    isLoading: widget.model.isVideoLoading,
                  );
                } catch (e) {
                  return Container(
                    height: 300,
                    color: Colors.grey[300],
                    child: Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.error, color: Colors.red, size: 48),
                          SizedBox(height: 16),
                          Text('Error loading video player'),
                          SizedBox(height: 8),
                          Text('$e', style: TextStyle(fontSize: 12)),
                        ],
                      ),
                    ),
                  );
                }
              },
            ),
            const SizedBox(height: 24),
            MeasurementInputWidget(
              label: currentStep['label'],
              hint: currentStep['hint'],
              controller: _inputController,
              isLastStep: widget.model.currentStep == widget.model.steps.length - 1,
              // onNext: _onNext, // Uncomment and implement if needed
              // onBack: _onBack, // Uncomment and implement if needed
            ),
          ],
        ),
      ),
    );
  }
}

class MeasurementSummaryWidget extends StatelessWidget {
  final MeasurementStepModel model;
  const MeasurementSummaryWidget({Key? key, required this.model}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(24),
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Icon(Icons.check_circle, color: Colors.green, size: 48),
            const SizedBox(height: 16),
            const Text('Review Your Measurements', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
            const SizedBox(height: 18),
            ...model.steps.map((step) => Padding(
              padding: const EdgeInsets.symmetric(vertical: 4),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(step['label'], style: const TextStyle(fontSize: 16)),
                  Text(model.measurements[step['field']] ?? '-',
                      style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600)),
                ],
              ),
            )),
            const SizedBox(height: 28),
            ElevatedButton.icon(
              icon: const Icon(Icons.home),
              label: const Text('Back to Home'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
              onPressed: () {
                Navigator.of(context).popUntil((route) => route.isFirst);
              },
            ),
          ],
        ),
      ),
    );
  }
}